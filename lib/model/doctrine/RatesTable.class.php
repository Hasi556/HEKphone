<?php

/**
 * RatesTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class RatesTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object RatesTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Rates');
    }

    /**
     * Match a rate to a dialed number at a specific time via a provider.
     * @param string $number
     * @param string $provider
     * @param date $date
     * @return DoctrineCollection
     */
    function findByNumberAndProvider($number, $provider, $date="now") {
        if ($date == "now")
            $date = date("Y-m-d H:i:s", time());

        if ( ! $timestamp = strtotime($date)) {
            throw New Exception("$date is an invalid date.");
        }

        $dayOfTheWeek = date("w", $timestamp);
        if ($dayOfTheWeek == 0 || $dayOfTheWeek == 6) {
            $weekend = true;
        } else {
            $weekend = false;
        }
        $week = ! $weekend;

        $queryProvider = Doctrine_Query::create()->from("Providers")->where("name = ?", $provider);
        if ( $queryProvider->count() < 1)
            throw New Exception("Provider $provider not found. Unable to proceed.");

        $queryPrefixes = Doctrine_Query::create()
            ->from('Prefixes')
            ->andWhere("'{$number}' LIKE Prefixes.prefix||'%'")
            ->orderBy("length(Prefixes.prefix) DESC")
            ->limit('2');
        if ( $queryPrefixes->count() < 1 )
            throw New Exception("Number $number not known in any region! Unable to proceed.");
        else {
             $collPrefixes = $queryPrefixes->fetchOne();
             $regionId = $collPrefixes['region'];
        }

        $r = Doctrine_Query::create()
            ->from('RatesRegions rr')
            ->where('rr.region = ? ', $regionId)
            ->leftJoin('rr.Rates r')
            ->andWhere('r.week = ? AND r.weekend = ? OR ( r.weekend = true AND r.week = true )', array($week, ! $week))
            ->leftJoin('r.Providers p')
            ->andWhere('p.name =?', $provider);

        if( $r->count() < 1 )
            throw New Exception("Unable to find a matching rate for \"{$number}\" at date \"{$date}\"!");
        else
            return $r->fetchOne()->Rates;
    }
}