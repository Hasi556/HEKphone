<?php

/**
 * AsteriskExtensionsTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class AsteriskExtensionsTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object AsteriskExtensionsTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('AsteriskExtensions');
    }

    /**
     * Gets all extensions belonging to the group call with number
     * (extension like 1234) $groupCallNumber as DoctrineCollection
     * @param string $groupCallNumber An extension like 1234
     * @return Doctrine_Collection
     * @return bool false if the group calls does not exist.
     */
    private function getGroupCall($groupCallNumber) {

    }

    /**
     * Returns the list of extensions in the group call
     * @param string $groupCallNumber An extension like 1234
     * @return array With the extensions in the group call may be empty.
     * @return bool false if the group call does not exist
     */
    public function getGroupCallInfo($groupCallNumber) {

    }

    /**
     * Adds a residents extension to a group call.
     * @param unknown_type $resident
     * @param unknown_type $groupCallNumber
     */
    public function addToGroupCall($resident, $groupCallNumber) {

    }
    /**
     * Removes a residents extension from a group call.
     * If it was the last number in the group call, the group-call gets deleted.
     * @param unknown_type $resident
     * @param unknown_type $groupCallNumber
     * @return bool true If succeded, false if the the resident was not in the group call
     */
    public function removeFromGroupCall($resident, $groupCallNumber) {

    }

    /** Deletes the entire group call even if there are still extensions in it.
     * @param unknown_type $groupCallNumber
     */
    public function deleteGroupCall($groupCallNumber) {

    }

    /**
     * @param unknown_type $groupCallNumber
     */
    public function cleanGroupCall($groupCallNumber) {

    }

    /**
     * The function updates/creates the extension neccesary to dial to the sip
     * phone of a user.
     *
     * The extensions are generated in the context 'phones' which can be
     * included in the context 'locked' and 'unlocked' and 'amt' (which is
     * what you reach if you call from outside)
     *
     * @param integer $extension
     * @param integer $residentid
     * @return string
     */
    public function updateResidentsExtension(Residents $resident)
    {
        DEFINE('ASTERISK_PARAMETER_SEPARATOR', ',');

        /* Get the extension of the residents phone */
        $extensionPrefix = '8695';
        if ( ! $extension = "1" . $resident['Rooms']['room_no']) {
          sfContext::getInstance()->getLogger()->warning('Tried to update extension of a resident ' . $residentid . ' not living in a room. Extension not updated.');
          return false;
        }
        $context   = 'phones';

        $phone     = Doctrine_Core::getTable('Phones')->findOneByName($extension);

        /* Delete any old entries of the room/phone */
        $this->createQuery()
           ->delete()
           ->where('exten = ?', $extensionPrefix . $extension)
           ->orWhere('exten = ?', $extension)
           ->execute();

        /* Prepare the extensions entries */
        // Calls to the phone from the PSTN
        $arrayExtensions[0] = array(
             'exten'        => $extensionPrefix . $extension,
             'priority'     => 1,
             'context'      => $context,
             'app'          => 'Dial',
        );
        if ($resident['vm_active'] && $phone['technology'] == 'SIP') {
            // in case the voicemail is activated, only ring for a specified number
            // of times
            $arrayExtensions[0]['appdata'] = $phone['technology'] . '/' . $extension . ASTERISK_PARAMETER_SEPARATOR
                                           . $resident['vm_seconds'];
        } else {
            // if not, ring until the caller hangs up
            $arrayExtensions[0]['appdata'] = $phone['technology'] . '/' . $extension;
        }

        // include forwarding to mailbox if it's active
        // this is resident specific so only insert it if
        // there's a residentid provided
        $vm_active = true;
        if ($resident['vm_active'] && $phone['technology'] == 'SIP')
        {
            $arrayExtensions[1] = array(
                'exten'        => $extensionPrefix . $extension,
                'priority'     => 2,
                'context'      => $context,
                'app'          => 'Voicemail',
                'appdata'      => $resident->id . '@default'
            );
        }

        // hangup after the call finished
        $arrayExtensions[2] = array(
            'exten'        => $extensionPrefix . $extension,
            'priority'     => 99,
            'context'      => $context,
            'app'          => 'Hangup',
            'appdata'      => ''
        );

        // Calls to the phone from other sip phones
        $arrayExtensions[3] = array(
             'exten'        => $extension,
             'priority'     => 1,
             'context'      => $context,
             'app'          => 'Set',
             'appdata'      => 'CDR(userfield)=internal'
        );
        $arrayExtensions[4] = array(
             'exten'        => $extension,
             'priority'     => 2,
             'context'      => $context,
             'app'          => 'GoTo',
             'appdata'      => $context . ASTERISK_PARAMETER_SEPARATOR
                             . $extensionPrefix . $extension . ASTERISK_PARAMETER_SEPARATOR
                             . '1' //Goto(context,extension,priority)
        );

        // Insert the new extension in the database: //
        $collExtensions = Doctrine_Collection::create('AsteriskExtensions');
        $collExtensions->fromArray($arrayExtensions);
        $collExtensions->save();

        return true;
    }
}