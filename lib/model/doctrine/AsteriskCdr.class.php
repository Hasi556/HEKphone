<?php

/**
 * AsteriskCdr
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    hekphone
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */

class AsteriskCdr extends BaseAsteriskCdr
{
    /**
     * Calculates the cost of an AsteriskCdr-Record (a finished call), creates
     * an record in the Calls table and marks the AsteriskCdr-Record as billed.
     * @param bool $rebill
     * @throws Exception
     * @return AsteriskCdr
     */
    function bill($rebill = false) {
       if ( $this->billed && ! $rebill)
           throw New Exception("The call with uniqueid={$this->uniqueid} has already been billed");

       /* Conform $this->dst to  "0049+prefix+number" */
       if ( substr($this->dst,0,7) == '8695020' ) {
            //It's a free call using *721
            $free = true;
            $destination = '0049' . substr($this->dst,7);
        } elseif ( substr($this->dst,0,4) == '0313' ) {
            // It's a free call to RSH
            $free = true;
            $destination = '00497211306' . substr($this->dst,4);
        } elseif ( substr($this->dst,0,4) == '0315' ) {
            // It's a free call to ABH
            $free = true;
            $destination = '00497211307' . substr($this->dst,4);
        } elseif ( substr($this->dst,0,2) == '00') {
            $free = false;
            $destination = $this->dst;
        } elseif ( substr($this->dst,0,1) == '0' ) {
            $free = false;
            $destination = '0049' . substr($this->dst,1);
        } elseif ( substr($this->dst,0,1) > 0 ) {
            $free = false;
            $destination = '0049721' . $this->dst;
        } else {
            throw new Exception("[uniqueid={$this->uniqueid}] Unable to match dialed Number to any pattern");
            }

        /* Bill outgoing calls coming from the old analog telephones */
        if( $this->dcontext == "anlage" ){
            // Extract the room No. $this->src is 004972186951NNN.
            $roomNo = substr($this->src,-3,3);

            // Find the user living in this room at the calldate
            $residentsTable = Doctrine_Core::getTable('Residents');
            try {
                $collResident = $residentsTable->findByRoomNo($roomNo,$this->calldate);
            } catch (Exception $e) {
                throw new Exception("[uniqueid={$this->uniqueid}] ".$e->getMessage());
            }

            // Get the provider
            $provider = $this->userfield;

            // Create an entry in the calls table
            $call = New Calls();
            $call->resident    = $collResident->id;
            $call->extension   = 1000+$roomNo;
            $call->date        = $this->calldate;
            $call->duration    = $this->billsec;
            $call->destination = $destination;

            // Calculate the cost of the outgoing call
            if( $free ) {
                $call->charges = 0;
                $call->rate = 0;
            } else {
                $ratesTable = Doctrine_Core::getTable('Rates');
                try{
                    $collRate = $ratesTable->findByNumberAndProvider(substr($destination,2), $provider);
                } catch (Exception $e) {
                    throw new Exception("[uniqueid={$this->uniqueid}] ".$e->getMessage());
                }

                $call->charges     = $collRate->getCharge($this->billsec);
                $call->rate        = $collRate->id;
            }

            $call->save();

            // Mark the cdr as billed
            $this->billed = true;
            $this->save();

            // This message will show up in the postgres-logfile
            echo "[NOTICE][uniqueid={$this->uniqueid}] Billed call. Extension:" . $call->extension
                 . "; Cost: ".round($call->charges,2) . "ct" . PHP_EOL;
        }
        return $this;
    }
}