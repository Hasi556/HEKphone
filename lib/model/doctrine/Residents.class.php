<?php

/**
 * Residents
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    hekphone
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Residents extends BaseResidents
{
     /**
     * Writes the residents password md5-encrypted to the database
     *
     * @param string $password
     */
    public function setPassword($password)
    {
      // don't update to empty password
      if ($password == '')
      {
        return $this;
      }
      else
      {
        return $this->_set('password', md5($password));
      }
    }

    /**
     * Sets a residents voicemail-settings. Modifies the asterisk_voicemail and
     * asterisk_extensions database table.
     *
     * @param boolean $active
     * @param integer $seconds
     * @param boolean $mailOnNewMessage
     * @param boolean $attachMessage
     * @param boolean $mailOnMissedCall
     */
    public function setVoicemailSettings($active, $seconds, $mailOnNewMessage, $attachMessage, $mailOnMissedCall)
    {
      $this->set('vm_active', $active);
      $this->set('vm_seconds', $seconds);
      $this->set('mail_on_missed_call', $mailOnMissedCall);
      // This updates the users extension
      if( ! Doctrine_Core::getTable('AsteriskExtensions')
            ->updateResidentsExtension($this)){

          return false;
      }

      return true;
    }

    public function getVoicemailSettings()
    {
      //TODO: Implement this!
    }

    public function sendLockUnlockEmail()
    {
      if($this->unlocked)
      {
        $this->sendUnlockEmail();
      }
      else
      {
        $this->sendLockEmail();
      }
    }

    public function sendUnlockEmail($lockDate)
    {     
      $messageBody = get_partial('global/movingInMail', array('bank_number' => $this['bank_number'],
                                                              'account_number' => $this['account_number'],
                                                              'email' => $this['email']));
                                                                
      $message = Swift_Message::newInstance()
                ->setFrom(sfConfig::get('hekphoneFromEmailAdress'))
                ->setTo($this['email'])
                ->setSubject('Dein Einzug')
                ->setBody($messageBody);
      sfContext::getInstance()->getMailer()->send($message);
    }

    public function sendLockEmail()
    {
      
      $messageBody = get_partial('global/movingOutMail', array('first_name' => $this['first_name'],
                                                            'lockDate' => $lockDate));
                                                                
            $message = Swift_Message::newInstance()
                ->setFrom(sfConfig::get('hekphoneFromEmailAdress'))
                ->setTo($this['email'])
                ->setSubject('Dein Auszug')
                ->setBody($messageBody);
            sfContext::getInstance()->getMailer()->send($message);
    }
    
    
    /**
     * Checks and acts upon almost (or completely) reached bill limit.
     * Sends warning Email for both thresholds (see sfConfig variables)
     * and locks the user if he exceeds his limit.
     * 
     */
    public function checkIfBillLimitIsAlmostReached()
    {
    	$percentage = $currentBillAmount/$limit; 
    	if ($percentage > 1)
    	{
    		$this->setUnlocked(false);
    		$this->sendLimitReachedEmail();
    	}
    	elseif( $percentage >= sfConfig::get('billLimitSecondThreshold'))
    	{
    		$this->set('warning2',true);
    	    $this->sendLimitWarningEmail(sfConfig::get('billLimitSecondThreshold'), $currentBillAmount); //TODO: Move $currentBillAmount to a member variable of the object
    	} 
    	elseif ($percentage >= sfConfig::get('billLimitFirstThreshold'))
    	{
    	    $this->sendLimitWarningEmail(sfConfig::get('billLimitFirstThreshold'), $currentBillAmount);
    	    $this->set('warning1',true);
        }
    }
    
    public function sendLimitWarningEmail($billLimitThreshold, $currentBillAmount)    
    {
    	
    	
    	$messageBody = get_partial('global/CurrentBillAmountReachedThresholdMail', 
    	               array('first_name' => $this['first_name'],
    	                     'threshold' => $billLimitThreshold,
    	                     'limit' => $this['bill_limit'],
    	                     'currentBillAmount' => $currentBillAmount));
                                                                
            $message = Swift_Message::newInstance()
                ->setFrom(sfConfig::get('hekphoneFromEmailAdress'))
                ->setTo($this['email'])
                ->setSubject('HEKphone: Gebuehrenwarnung!')
                ->setBody($messageBody);
            sfContext::getInstance()->getMailer()->send($message);  
    }
    
    
    public function sendLimitReachedEmail()
    {
        $messageBody = get_partial('global/CurrentBillAmountReachedLimitMail', 
                       array('first_name' => $this['first_name'],
                             'limit' => $this['bill_limit'],
                             'currentBillAmount' => $currentBillAmount));
                                                                
            $message = Swift_Message::newInstance()
                ->setFrom(sfConfig::get('hekphoneFromEmailAdress'))
                ->setTo($this['email'])
                ->setSubject('HEKphone: Gebuehrenlimit ueberschritten!')
                ->setBody($messageBody);
            sfContext::getInstance()->getMailer()->send($message);  	
    }
}
