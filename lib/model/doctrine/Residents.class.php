<?php

/**
 * Residents
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    hekphone
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Residents extends BaseResidents
{
     /**
     * Writes the residents password md5-encrypted to the database
     *
     * @param string $password
     */
    public function setPassword($password)
    {
      // don't update to empty password
      if ($password == '')
      {
        return $this;
      }
      else
      {
        return $this->_set('password', md5($password));
      }
    }

    /**
     * Sets a residents voicemail-settings. Modifies the asterisk_voicemail and
     * asterisk_extensions database table.
     *
     * @param boolean $active
     * @param integer $seconds
     * @param boolean $mailOnNewMessage
     * @param boolean $attachMessage
     * @param boolean $mailOnMissedCall
     */
    public function setVoicemailSettings($active, $seconds, $mailOnNewMessage, $attachMessage, $mailOnMissedCall)
    {
      $this->set('vm_active', $active);
      $this->set('vm_seconds', $seconds);
      $this->set('mail_on_missed_call', $mailOnMissedCall);
      // This updates the users extension
      if( ! Doctrine_Core::getTable('AsteriskExtensions')
            ->updateResidentsExtension($this)){

          return false;
      }

      return true;
    }

    public function getVoicemailSettings()
    {
      //TODO: Implement this!
    }


    /**
     * Sends a lock/unlock email depending on the residents "unlocked" property
     */
    public function sendLockUnlockEmail()
    {
      if($this->unlocked)
      {
        $this->sendUnlockEmail();
      }
      else
      {
        $this->sendLockEmail();
      }
    }


    /**
     * Sends an E-Mail containing information about him being unlocked and
     * about general information to a resident.
     */
    public function sendUnlockEmail()
    {
      $messageBody = get_partial('global/movingInMail', array('bank_number' => $this['bank_number'],
                                                              'account_number' => $this['account_number'],
                                                              'email' => $this['email']));

      $message = Swift_Message::newInstance()
                ->setFrom(sfConfig::get('hekphoneFromEmailAdress'))
                ->setTo($this['email'])
                ->setSubject('Dein Einzug')
                ->setBody($messageBody);
      sfContext::getInstance()->getMailer()->send($message);
    }

    /**
     * Notifies a user that he's going to be locked at $lockDate.
     *
     * @param string $lockDate
     */
    public function sendLockEmail($lockDate)
    {
      $messageBody = get_partial('global/movingOutMail', array('first_name' => $this['first_name'],
                                                               'lockDate' => $lockDate));

      $message = Swift_Message::newInstance()
          ->setFrom(sfConfig::get('hekphoneFromEmailAdress'))
          ->setTo($this['email'])
          ->setSubject('Dein Auszug')
          ->setBody($messageBody);
      sfContext::getInstance()->getMailer()->send($message);
    }

    /**
     * Checks and acts upon almost (or completely) reached bill limit.
     * Sends warning Email for both thresholds (see sfConfig variables)
     * and locks the user if he exceeds his limit.
     *
     */
    public function checkIfBillLimitIsAlmostReached()
    {
        $collCurrentBillAmount = Doctrine_Query::create()
            ->from('Calls c')
            ->select('SUM(c.charges)')
            ->where('bill IS NULL')
            ->addWhere('resident = ?', $this->id)
            ->execute();

        $currentBillAmount = $collCurrentBillAmount[0]['SUM']; //TODO: Move $currentBillAmount to a member variable of the objec

    	$percentage = ($currentBillAmount/100)/$this->bill_limit; // divide by 100: unit conversion ct/eur

    	if ($percentage > 1)
    	{
            $this->setUnlocked(false);
            $this->sendLimitReachedEmail();
    	}
    	elseif( $percentage >= sfConfig::get('billLimitSecondThreshold'))
    	{
            $this->set('warning2',true);
    	    $this->sendLimitWarningEmail(sfConfig::get('billLimitSecondThreshold'), $currentBillAmount);
    	}
    	elseif ($percentage >= sfConfig::get('billLimitFirstThreshold'))
    	{
    	    $this->sendLimitWarningEmail(sfConfig::get('billLimitFirstThreshold'), $currentBillAmount);
    	    $this->set('warning1',true);
        }
    }

    /**
     * Notifies a resident that he almost reached his bill_limit.
     * $billLimitThreshold represents the percentage of the limit he has reached
     * $currentBillAmount holds the residents sum of all the Residents unbilled calls
     * @param unknown_type $billLimitThreshold
     * @param unknown_type $currentBillAmount
     */
    public function sendLimitWarningEmail($billLimitThreshold, $currentBillAmount)
    {


    	$messageBody = get_partial('global/currentBillAmountReachedThresholdMail',
    	               array('first_name' => $this['first_name'],
    	                     'threshold' => $billLimitThreshold,
    	                     'limit' => $this['bill_limit'],
    	                     'currentBillAmount' => $currentBillAmount));

        $message = Swift_Message::newInstance()
            ->setFrom(sfConfig::get('hekphoneFromEmailAdress'))
            ->setTo($this['email'])
            ->setSubject('HEKphone: GebÃ¼hrenwarnung!')
            ->setBody($messageBody);

        sfContext::getInstance()->getMailer()->send($message);
    }


    /**
     * Notifies a resident that he reached his limit and is now locked and can't
     * do any more calls
     */
    public function sendLimitReachedEmail()
    {
        $messageBody = get_partial('global/currentBillAmountReachedLimitMail',
                       array('first_name' => $this['first_name'],
                             'limit' => $this['bill_limit'],
                             'currentBillAmount' => $currentBillAmount));

        $message = Swift_Message::newInstance()
            ->setFrom(sfConfig::get('hekphoneFromEmailAdress'))
            ->setTo($this['email'])
            ->setSubject('HEKphone: Gebuehrenlimit ueberschritten!')
            ->setBody($messageBody);

        sfContext::getInstance()->getMailer()->send($message);
    }
}
