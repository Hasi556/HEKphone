# ==
#   View in the hekdb for syncing the residents data
# ==

HekdbCurrentResidents:
  connection: hekdb
  tableName: letztezimmerbelegung
  columns:
    vorname:
      name: vorname as first_name
      type: string
    nachname:
      name: nachname as last_name
      type: string
    nutzerid:
      name: nutzerid as id
      primary: true
      type: integer   
    zimmernummer:
      name: zimmernummer as room_no
      type: string
    einzug:
      name: einzug as move_in
      type: date
    auszug:
      name: auszug as move_out
      type: date
  options:
    charset: latin1
    

# ===
# Tables required by asterisk.
# === 

# Asterisk writes call detail records to this table as specified in
# /etc/asterisk/cdr_pgsql.conf. A postgres trigger ought to allocate the
# calls to an user and calculates the fees.
AsteriskCdr:
  connection: hekphone
  tableName: asterisk_cdr
  columns:
    calldate: 
      type: timestamp
      notnull: true
      default: now()
    clid: 
      type: string
      notnull: true
    src: 
      type: string
      notnull: true
    dst: 
      type: string
      notnull: true
    dcontext: 
      type: string
      notnull: true
    channel: 
      type: string
      notnull: true
    dstchannel: 
      type: string
      notnull: true
    lastapp: 
      type: string
      notnull: true
      primary: false
    lastdata: 
      type: string
      notnull: true
    duration: 
      type: integer(8)
      notnull: true
      default: '0'
    billsec: 
      type: integer(8)
      notnull: true
      default: '0'
    disposition: 
      type: string
      notnull: true
    amaflags: 
      type: integer(8)
      notnull: true
      default: '0'
    accountcode: 
      type: string
      notnull: true
    uniqueid: 
      type: string
      notnull: true
      unique: true
    userfield: 
      type: string
      notnull: true
    billed: 
      type: boolean
      notnull: true
      default: 'false' 
      
# Asterisk connects to the following tables via odbcs. It's configured in 
# res_odbc.conf, odbc.ini and extconfig.conf

# AsteriskExtensions: The extensions in this table are fetched everytime a call
# is placed.  
# There are supposed to be two major contexts in this table: 
#   phones which holds the phones extensions ("exten => 1405,1,Dial(SIP/1405)")
#   groupcalls which are managed in the groupcalls relation
AsteriskExtensions:
  connection: hekphone
  tableName: asterisk_extensions
  columns:
    id:
      type: integer(4)
      primary: true
      autoincrement: true
    context:
      type: string()
      notnull: true
      default: 'default'
    exten:
      type: string()
      notnull: false
    priority:
      type: integer(2)
      unsigned: true
      notnull: true
      default: '0'
    app:
      type: string()
      notnull: true
    appdata:
      type: string()
      default: ''

# AsteriskVoicemail: For every resident, a voicemailbox has to be created if he
# wants to use the vm. This is done (via Resident->createVoicemailbox()) when he
# updates his settings in the frontend.
# In this table, only the details of the voicemailbox are stored, not the messages.
# See voicemail.conf.sample to find out more about the various configuration fields.
AsteriskVoicemail:
  connection: hekphone
  tableName: asterisk_voicemail
  columns:
    uniqueid:
      type: integer
      notnull: true
    customer_id:
      type: string(11)
      notnull: true
      default: '0'
    context:
      type: string(50)
      notnull: true
      default: 'default'
    mailbox:
      type: string(11)
      notnull: true
      default: '0'
    password:
      type: string(10)
      notnull: true
      default: '0'
    fullname:
      type: string(150)
      notnull: true
      default: ''
    email:
      type: string(50)
      email: true
      notnull: true
    pager:
      type: string(50)
      notnull: true
      default: ''
    tz:
      type: string(10)
      notnull: true
      default: 'european'
    attach:
      type: string(4)
      notnull: true
      default: 'yes'
    saycid:
      type: string(4)
      notnull: true
      default: 'yes'
    dialout:
      type: string(4)
      notnull: true
      default: ''
    callback:
      type: string(10)
      notnull: true
      default: ''
    review:
      type: string(4)
      notnull: true
      default: 'no'
    operator:
      type: string(4)  
      notnull: true
      default: 'no'
    envelope:
      type: string(4)  
      notnull: true
      default: 'no'
    sayduration:
      type: string(4)  
      notnull: true
      default: 'no'
    saydurationm:
      type: integer(4)  
      notnull: true
      default: 1
    sendvoicemail:
      type: string(4)  
      notnull: true
      default: 'no'
    delete:
      type: string(4)  
      notnull: true
      default: 'no'
    nextaftercmd:
      type: string(4)  
      notnull: true
      default: 'yes'
    forcename:
      type: string(4)  
      notnull: true
      default: 'no'
    forcegreetings:
      type: string(4)  
      notnull: true
      default: 'no'
    hidefromdir:
      type: string(4)  
      notnull: true
      default: 'yes'
    minsecs:
      type: int(2)
      default: 3      
    stamp:
      type: timestamp
   
# AsteriskSip: This table, that is required by asterisk is replaced by a view.
#
# We want to reduce redundant information in the database and the state "unlocked/
# locked" belongs to a user, not a phone, this "table" asterisk_sip is supposed to
# be a view that collects all data from Phones and additionally fetches the
# locked/unlocked state from residents. It also fetches the md5-hash of the residents
# password and uses it as secret of the sip-account. (TODO: Fetch language aswell)      
# Unfortunatele, it seems impossible to implement this in a clean way with doctrine.
# So after you build the database from the schema, you need to create the view.
#
# As asterisk needs to write to some fields in asterisk_sip some 
# "onupdate do instead" rules are be defined.
#
# Because the view uses a typecast from boolean (resident->locked) to the
# enum 'context' which is either 0: locked or 1: unlocked, you have to create 
# this typecast first. This can be done with the postgres-01-typecast-bool-context.sql
# file:
#     psql <database> <username> - f postgres-01-typecast-bool-context.sql
#
# Now, the view and the rules can can easily be created 
# via postgres02-asterisk_sip-view.sql:
#     psql <database> <username> - f postgres-02-asterisk_sip-view.sql

         
# This table is the skeleton of the view asterisk_sip which specifies the
# sip friend of asterisk.
# It contains every neccessary information except "context" which is either
# "locked" (outgoing calls denied) or "unlocked" (allowed) because
# this information belongs to an user not to a telephone. So its stored in
# Bewohner->context.
# See comment on asterisk_sip!
Phones:
  connection: hekphone
  tableName: phones
  columns:
    id:
      type: integer(11)
      notnull: true
      primary: true
      autoincrement: true
## By which technologie the telephone is adressed. In case of DAHDI, 
## the group (span) has to be provided.                               
    technology:
      type: enum
      length: 20
      values: ['SIP', 'DAHDI/g1', 'DAHDI/g3']
      notnull: true
      default: 'SIP'
    name:
      type: string(80)
      notnull: true
      default: ''
    'type':
      type: enum
      length: 6
      values: ['user','peer','friend']
      notnull: true
      default: 'friend'
## Set the callerid in the asterisk_sip view?
    callerid:
      type: string(80)
## Parameter to identify the phone:
    defaultuser:
      type: string(80)
      notnull: true
      default: ''
## As our telephones desperately try to register, we need host=dynamic:
    host:
      type: string(31)
      notnull: true
      default: dynamic
## With host = dynamic: This "defaultip" is used, if the client is not registered.
## The DHCP configuration is created from this field and the following: 
    defaultip:
      type: string(15)
    mac:
      type: string(20)
      default: ''
## Maybe also fetch the language via a view from the residents table (->culture):
    language:
      type: string(2)
      default: 'de'
## The field mailbox (contains "mailboxid@context") equals a users id
## This field is used by the phones MWI: The denoted mailbox is checked for
## new messages and if some are available it's indicated to the phone.
    mailbox:
      type: string(50)
## These fields are obviousely required by asterisk:
    regserver:
      type: string(20)
    regseconds:    # updated by asterisk periodically (with time elapsed since registration?)
      type: string(20)
    ipaddr:        # updated by asterisk periodically with the current ip of the registered phone
      type: string(15)
      notnull: true
      default: ''
    port:          # updated by asterisk periodically with the port of the registered phone
      type: string(5)
      unsigned: true
      notnull: true
      default: ''
    fullcontact:   # updated by asterisk with the a full <sip://uri>
      type: string(80)
      notnull: true
      default: ''
    useragent:     # updated by asterisk (with the useragent of the registered phone?)
      type: string(20)
      default: ''
## The field lastms contains the time when qualify was checked for the last time.(?)
## see https://issues.asterisk.org/view.php?id=14196
    lastms:       # updated by asterisk every time asterisk qualifys the phone
      type: string(11)
      default: ''

# ===
# Actual HEKPhone Tables 
# ===

Residents:
  connection: hekphone
  tableName: residents
  columns:
    id: 
      type: integer
      primary: true
    last_name: 
      type: string(50)
      notnull: true
    first_name: 
      type: string(50)
      notnull: true
    email:
      type: string (255)
      email: true
    move_in: 
      type: date
      notnull: true
    move_out: 
      type: date
      comment: 'NULL if its not known when the resident will move out'
    bill_limit: 
      type: integer(3)
      notnull: true
      default: '75'
      comment: 'in EUR'
    room:
      type: integer(3)
      unique: true
    warning1: 
      type: boolean
      default: false
      comment: 'true: the resident has been notified that his bill is approaching the limit'
    warning2: 
      type: boolean
      default: false
      comment: 'true: the resident has been notified that his bill is approaching the limit even closer'
    unlocked:
      type: boolean
      default: false
    vm_active:
      type: boolean
      notnull: true
      default: false
    vm_seconds:
      type: int
      notnull: true
      default: 15
      comment: 'how long until the voicemail picks up'
    mail_on_missed_call:
      type: boolean
      notnull: true
      default: true
      comment: 'wheter to send an notification email even if the vm box did not pick up'
    shortened_itemized_bill: 
      type: boolean
      default: true
    redirect_active:
      type: boolean
      default: false
      notnull: true
    redirect_to:
      type: string(25)
      comment: 'telephone number (as the user dials it) to rerout the call to'
    redirect_seconds:
      type: int(3)
    account_number: string(10)
    bank_number: string(8)
    password: string(255)
    hekphone: 
      type: boolean
      default: false
    culture:
      type: string(5)
      default: 'de_DE'
  relations:
    Rooms:
      local: room
      foreign: id
      type: one
    Banks:
      local: bank_number
      foreign: bank_number
      type: one
    Comments:
      local: id
      foreign: resident
      type: many
    Calls:
      local: id
      foreign: resident
      type: many
    Bills:
      local: id
      foreign: resident
      type: many
    AsteriskVoicemail:
      local: id
      foreign: uniqueid
      type: one
    Groupcalls:
      class: GroupCalls
      local: resident_id
      foreign: groupcall_id
      refClass: ResientsGroupcalls
      
Rooms:
  connection: hekphone
  tableName: rooms
  columns:
    id: 
      type: integer(3)
      primary: true
      sequence: rooms_id
    room_no:
      type: integer(3)
      unique: true
    comment: string
    phone:
      type: integer(3)
      unique: true
  relations:
    Phones:
      local: phone
      foreign: id
      type: one
    Residents:
      local: id
      foreign: room
      type: many

Comments:
  connection: hekphone
  tableName: comments
  columns:
    resident: 
      type: integer(6)
      notnull: true
    stamp: 
      type: timestamp
      notnull: true
      default: now()
    comment: 
      type: string(1000)
      notnull: true
  relations:
    Residents:
      local: resident
      foreign: id
      type: one

Banks:
  connection: hekphone
  tableName: banks
  columns:
    bank_number: 
      type: string(8)
      notnull: true
      primary: true
      unique: true
    name: 
      type: string(80)
      notnull: true
    zip: 
      type: string(5)
      fixed: true
    locality: string(80)
  relations:
    Residents:
      local: bank_number
      foreign: bank_number
      type: many

Calls:
  connection: hekphone
  tableName: calls
  columns:
    id: 
      type: integer(7)
      primary: true
      autoincrement: true
    resident: 
      type: integer(6)
      notnull: true
    extension: 
      type: string(10)
      notnull: true
    date: 
      type: timestamp
      default: now()
    duration: 
      type: string(6)
      notnull: true
    destination: 
      type: string(50)
      notnull: true
    asterisk_uniqueid:
      type: string(30)
      notnull: false
      default: null
      unique: true
    charges: 
      type: decimal(18)
      notnull: true
    rate: 
      type: integer(6)
      notnull: true
    bill: 
      type: integer(6)
      default: null
  relations:
    Residents:
      local: resident
      foreign: id
      type: one
    Rates:
      local: rate
      foreign: id
      type: one
    AsteriskCdr:
      local: asterisk_uniqueid
      foreign: uniqueid
      type: one

Bills:
  connection: hekphone
  tableName: bills
  columns:
    id: 
      type: integer(6)
      primary: true
      autoincrement: true
    resident: 
      type: integer(6)
      notnull: true
      primary: false
    date: 
      type: date
      notnull: true
    billingperiod_start:
      type: date
      notnull: true
    billingperiod_end:
      type: date
      notnull: true
    amount: 
      type: decimal(18)
      notnull: true
    debit_failed: 
      type: boolean
      notnull: true
      default: 'false'
  relations:
    Residents:
      local: resident
      foreign: id
      type: one
    Calls:
      local: id
      foreign: bill
      type: many
# There's no relation to bills because as long as the call is not billed
# theres no bill id set. Thus the relation would be violated.
# This might be a flaw in the database design. (It's probably better to assign a     
# call to a bill in the moment the call is "billed" (transfered from asterisk_cdr
# to calls). A bill is then assigned to a user) FIXME?

Providers:
  connection: hekphone
  tableName: providers
  columns:
    id: 
      type: integer(1)
      primary: true
    name: 
      type: string(20)
      notnull: true
  relations:
    Rates:
      local: id
      foreign: provider
      type: many
            
RatesRegions:
  connection: hekphone
  tableName: rates_regions
  columns:
    id: 
      type: integer(6)
      primary: true
      autoincrement: true
    rate:
      type: integer(6)
      notnull: true
      unique: true
    region:
      type: integer(6)
      unique: true
  relations:
    Rates:
      local: rate
      foreign: id
      type: one
    Regions:
      local: region
      foreign: id
      type: many #one???

Regions:
  connection: hekphone
  tableName: regions
  columns:
    id: 
      type: integer(6)
      primary: true
    name: 
      type: string(80)
      notnull: true
      unique: true
  relations:
    RatesRegions:
      local: id
      foreign: region
      type: one # ONE or MANY?
    Prefixes:
      local: id
      foreign: region
      type: many

Rates:
  connection: hekphone
  tableName: rates
  columns:
    id: 
      type: integer(6)
      primary: true
    provider: 
      type: integer(1)
      notnull: true
    primary_time_begin: 
      type: time
      notnull: true
    primary_time_rate: 
      type: decimal(18)
      notnull: true
    secondary_time_begin: 
      type: time
    secondary_time_rate: 
      type: decimal(18)
    weekend: 
      type: boolean
      notnull: true
      default: 'true'
    week: 
      type: boolean
      notnull: true
      default: 'true'
    pulsing:
      type: enum
      values: ['1/1', '60/60', '30/1', '60/1', '60/0']
      notnull: true
    name: 
      type: string(80) 
      notnull: true
  relations:
    RatesRegions:
      local: id
      foreign: rate
      type: many
    Providers:
      local: provider
      foreign: id
      type: one

Prefixes:
  connection: hekphone
  tableName: prefixes
  columns:
    id: 
      type: integer(6)
      primary: true
      autoincrement: true
    prefix: 
      type: string(20)
      notnull: true
    name: 
      type: string(80)
      notnull: true
    region: 
      type: integer(6)
      notnull: true
  relations:
    Regions:
      local: region
      foreign: id
      type: one
      
# Groupcalls with a many-to-many relation to residents
Groupcalls:
  connection: hekphone
  tableName: groupcalls
  columns:
    id:
      type: integer(3)
      primary: true
      autoincrement: true
    extension:
      type: string(4)
      unique: true
    name: 
      type: string(30)
  relations:
    Residents:
      class: Residents
      local: groupcall_id
      foreign: resident_id
      refClass: ResidentsGroupcalls
      
ResidentsGroupcalls:
  columns:
    resident_id:
      type: integer
      primary: true
    groupcall_id:
      type: integer
      primary: true